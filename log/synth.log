Qflow synthesis logfile created on 2018年 4月 28日 土曜日 20:27:13 JST
Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2016  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.7+381 (git sha1 8f2638a, gcc 5.4.0-6ubuntu1~16.04.5 -fPIC -Os)


-- Executing script file `fa.ys' --

1. Executing Liberty frontend.
Imported 8 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v' to AST representation.
Generating RTLIL representation for module `\fa'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \fa

3.1.2. Analyzing design hierarchy..
Top module:  \fa
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fa.$proc$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:31$1'.
     1/4: $1\r_co[0:0]
     2/4: $1\r_s[0:0]
     3/4: $0\r_co[0:0]
     4/4: $0\r_s[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fa.\r_s' using process `\fa.$proc$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:31$1'.
  created $dff cell `$procdff$10' with positive edge clock.
Creating register for signal `\fa.\r_co' using process `\fa.$proc$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:31$1'.
  created $dff cell `$procdff$11' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\fa.$proc$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:31$1'.
Removing empty process `fa.$proc$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:31$1'.
Cleaned up 1 empty switch.

3.3. Executing OPT_EXPR pass (perform const folding).
Replacing $eq cell `$eq$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:32$2' (1) in module `\fa' with constant driver `$eq$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:32$2_Y = \rst'.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
  removed 6 unused temporary wires.
Removed 0 unused cells and 6 unused wires.

3.5. Executing CHECK pass (checking for obvious problems).
checking module fa..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$8 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fa.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$11 ($dff) from module fa.
Replaced 1 DFF cells.

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
  removing unused non-port wire \r_co.
  removed 1 unused temporary wires.
Removed 0 unused cells and 7 unused wires.

3.6.8. Executing OPT_EXPR pass (perform const folding).

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$8 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fa.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 0 unused cells and 7 unused wires.

3.6.15. Executing OPT_EXPR pass (perform const folding).

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module fa:
  creating $macc model for $add$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:36$3 ($add).
  creating $macc model for $add$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:36$4 ($add).
  merging $macc model for $add$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:36$3 into $add$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:36$4.
  creating $alu model for $macc $add$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:36$4.
  creating $alu cell for $add$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:36$4: $auto$alumacc.cc:474:replace_alu$12
  created 1 $alu and 0 $macc cells.

3.9. Executing SHARE pass (SAT-based resource sharing).

3.10. Executing OPT pass (performing simple optimizations).

3.10.1. Executing OPT_EXPR pass (perform const folding).

3.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$8 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fa.
Performed a total of 0 changes.

3.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
  removing unused `$add' cell `$add$/mnt/c/Users/seijirom/work/FullAdder_or1u/source/fa.v:36$3'.
  removed 1 unused temporary wires.
Removed 1 unused cells and 8 unused wires.

3.10.8. Executing OPT_EXPR pass (perform const folding).

3.10.9. Rerunning OPT passes. (Maybe there is more to do..)

3.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$8 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fa.
Performed a total of 0 changes.

3.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.10.15. Executing OPT_EXPR pass (perform const folding).

3.10.16. Finished OPT passes. (There is nothing left to do.)

3.11. Executing FSM pass (extract and optimize FSM).

3.11.1. Executing FSM_DETECT pass (finding FSMs in design).

3.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.12. Executing OPT pass (performing simple optimizations).

3.12.1. Executing OPT_EXPR pass (perform const folding).

3.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.12.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.12.5. Finished fast OPT passes.

3.13. Executing MEMORY pass.

3.13.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.13.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.13.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.13.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.13.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.17.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fa..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $procmux$8 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.17.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fa.
Performed a total of 0 changes.

3.17.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.17.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.17.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 1 unused cells and 8 unused wires.

3.17.8. Executing OPT_EXPR pass (perform const folding).

3.17.9. Finished OPT passes. (There is nothing left to do.)

3.18. Executing TECHMAP pass (map to technology primitives).

3.18.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.18.2. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_alu'.
Parameter \A_SIGNED = 0
Parameter \B_SIGNED = 0
Parameter \A_WIDTH = 1
Parameter \B_WIDTH = 1
Parameter \Y_WIDTH = 1
Generating RTLIL representation for module `$paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1'.

3.18.3. Continuing TECHMAP pass.
Mapping fa.$auto$alumacc.cc:474:replace_alu$12 using $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=1\Y_WIDTH=1.
Mapping fa.$procmux$8 ($mux) with simplemap.
Mapping fa.$procdff$10 ($dff) with simplemap.
Mapping fa.$techmap$auto$alumacc.cc:474:replace_alu$12.$xor$<techmap.v>:262$62 ($xor) with simplemap.
Mapping fa.$techmap$auto$alumacc.cc:474:replace_alu$12.$xor$<techmap.v>:263$63 ($xor) with simplemap.
Mapping fa.$techmap$auto$alumacc.cc:474:replace_alu$12.$and$<techmap.v>:260$61 ($and) with simplemap.

3.18.4. Executing AST frontend in derive mode using pre-parsed AST for module `\_90_lcu'.
Parameter \WIDTH = 1
Generating RTLIL representation for module `$paramod\_90_lcu\WIDTH=1'.

3.18.5. Executing PROC pass (convert processes to netlists).

3.18.5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.18.5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.18.5.3. Executing PROC_INIT pass (extract init attributes).

3.18.5.4. Executing PROC_ARST pass (detect async resets in processes).

3.18.5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$70'.
     1/2: $0\g[0:0]
     2/2: $0\p[0:0]

3.18.5.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\_90_lcu\WIDTH=1.\p' from process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$70'.
No latch inferred for signal `$paramod\_90_lcu\WIDTH=1.\g' from process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$70'.

3.18.5.7. Executing PROC_DFF pass (convert process syncs to FFs).

3.18.5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\_90_lcu\WIDTH=1.$proc$<techmap.v>:207$70'.
Cleaned up 0 empty switches.

3.18.6. Executing OPT pass (performing simple optimizations).

3.18.6.1. Executing OPT_EXPR pass (perform const folding).

3.18.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\_90_lcu\WIDTH=1'.
Removed a total of 0 cells.

3.18.6.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\_90_lcu\WIDTH=1..
  removing unused non-port wire \j.
  removing unused non-port wire \i.
  removed 5 unused temporary wires.
Removed 1 unused cells and 13 unused wires.

3.18.6.5. Finished fast OPT passes.

3.18.7. Continuing TECHMAP pass.
Mapping fa.$auto$alumacc.cc:474:replace_alu$12.lcu using $paramod\_90_lcu\WIDTH=1.
Mapping fa.$techmap$auto$alumacc.cc:474:replace_alu$12.$ternary$<techmap.v>:258$60 ($mux) with simplemap.
Mapping fa.$techmap$auto$alumacc.cc:474:replace_alu$12.$not$<techmap.v>:258$59 ($not) with simplemap.
Mapping fa.$auto$alumacc.cc:474:replace_alu$12.B_conv ($pos) with simplemap.
Mapping fa.$auto$alumacc.cc:474:replace_alu$12.A_conv ($pos) with simplemap.
Mapping fa.$techmap$auto$alumacc.cc:474:replace_alu$12.lcu.$and$<techmap.v>:212$71 ($and) with simplemap.
Mapping fa.$techmap$auto$alumacc.cc:474:replace_alu$12.lcu.$or$<techmap.v>:212$72 ($or) with simplemap.
No more expansions possible.

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Replacing $_MUX_ cell `$auto$simplemap.cc:277:simplemap_mux$73' (??0) in module `\fa' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$12.$ternary$<techmap.v>:258$60_Y = \ci'.
Replacing $_XOR_ cell `$auto$simplemap.cc:85:simplemap_bitop$68' (0?) in module `\fa' with constant driver `$techmap$auto$alumacc.cc:474:replace_alu$12.$xor$<techmap.v>:263$63_Y [1] = $auto$alumacc.cc:491:replace_alu$14'.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.19.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.19.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
  removing unused `$_NOT_' cell `$auto$simplemap.cc:37:simplemap_not$74'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$69'.
  removing unused `$_AND_' cell `$auto$simplemap.cc:85:simplemap_bitop$75'.
  removing unused `$_OR_' cell `$auto$simplemap.cc:85:simplemap_bitop$76'.
  removed 25 unused temporary wires.
Removed 5 unused cells and 38 unused wires.

3.19.5. Finished fast OPT passes.

3.20. Executing ABC pass (technology mapping using ABC).

3.20.1. Extracting gate netlist of module `\fa' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 8 wires to a netlist network with 4 inputs and 1 outputs.

3.20.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.20.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

3.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
  removed 7 unused temporary wires.
Removed 5 unused cells and 45 unused wires.

3.21.5. Finished fast OPT passes.

3.22. Executing HIERARCHY pass (managing design hierarchy).

3.22.1. Analyzing design hierarchy..
Top module:  \fa

3.22.2. Analyzing design hierarchy..
Top module:  \fa
Removed 0 unused modules.

3.23. Printing statistics.

=== fa ===

   Number of wires:                 11
   Number of wire bits:             11
   Number of public wires:           8
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_ANDNOT_                       1
     $_DFF_P_                        1
     $_XNOR_                         2

3.24. Executing CHECK pass (checking for obvious problems).
checking module fa..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  final dff cell mappings:
    DFFPOSX1 _DFF_N_ (.CLK(~C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_
Mapping DFF cells in module `\fa':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fa.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
Removed 5 unused cells and 45 unused wires.

5.8. Executing OPT_EXPR pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\fa' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 7 wires to a netlist network with 4 inputs and 1 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/OpenRule1um/OpenRule1um_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/OpenRule1um/OpenRule1um_stdcells.lib" has 3 cells (5 skipped: 1 seq; 0 tri-state; 4 no func).  Time =     0.00 sec
ABC: Memory =    0.04 MB. Time =     0.00 sec
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        5
ABC RESULTS:           NAND2X1 cells:       10
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        1
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 8 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port fa.a: Missing option -inpad.
Don't map input port fa.b: Missing option -inpad.
Don't map input port fa.ci: Missing option -inpad.
Don't map input port fa.ck: Missing option -inpad.
Mapping port fa.co using BUFX2.
Don't map input port fa.rst: Missing option -inpad.
Mapping port fa.s using BUFX2.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fa..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fa.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fa'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fa..
  removed 1 unused temporary wires.
Removed 0 unused cells and 9 unused wires.

9.8. Executing OPT_EXPR pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: 8d529bb050
CPU: user 0.11s system 0.03s, MEM: 291.36 MB total, 6.15 MB resident
Yosys 0.7+381 (git sha1 8f2638a, gcc 5.4.0-6ubuntu1~16.04.5 -fPIC -Os)
Time spent: 22% 2x abc (0 sec), 11% 18x opt_expr (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu035_stdcells"
End of library at line 643
Lib Read:  Processed 644 lines.
Top internal fanout is 2 (load 241.719) from node _12_,
driven by INVX1 with strength 102.797 (fF driven at latency 200)
Top fanout load-to-strength ratio is 0.77073 (latency = 154.146 ps)
Top input node fanout is 3 (load 49.1324) from node ci.
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 16    	Out: 16    	+0
	"2" gates	In: 2    	Out: 2    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /mnt/c/Users/seijirom/work/FullAdder_or1u/synthesis
Files:
   Verilog: /mnt/c/Users/seijirom/work/FullAdder_or1u/synthesis/fa.rtl.v
   Verilog: /mnt/c/Users/seijirom/work/FullAdder_or1u/synthesis/fa.rtlnopwr.v
   Spice:   /mnt/c/Users/seijirom/work/FullAdder_or1u/synthesis/fa.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
Synthesis script ended on 2018年 4月 28日 土曜日 20:27:17 JST
